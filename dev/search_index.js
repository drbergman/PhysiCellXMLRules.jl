var documenterSearchIndex = {"docs":
[{"location":"lib/write_xml/","page":"Write XML","title":"Write XML","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/write_xml/#Write-XML","page":"Write XML","title":"Write XML","text":"","category":"section"},{"location":"lib/write_xml/","page":"Write XML","title":"Write XML","text":"Writes the XML file for behavior rulesets. Note, when importing a CSV to write to XML, the full expressiveness of the XML format is not available. In particular, the following cannot be read in from a CSV:","category":"page"},{"location":"lib/write_xml/","page":"Write XML","title":"Write XML","text":"hierarchical rulesets (those with mediators and aggregators below the top two levels)\nmediator/aggregator functions\nattenuator/accumulator behaviors (only setters)","category":"page"},{"location":"lib/write_xml/","page":"Write XML","title":"Write XML","text":"Modules = [PhysiCellXMLRules]\nPages = [\"write_xml.jl\"]","category":"page"},{"location":"lib/write_xml/#PhysiCellXMLRules.standardizeCustomName-Tuple{Any}","page":"Write XML","title":"PhysiCellXMLRules.standardizeCustomName","text":"standardizeCustomName(name::AbstractString)\n\nIf the name for a signal or behavior starts with \"custom:\", use the synonym \"custom <name>\" instead.\n\npcvct uses : to use attributes to specify elements in an XML path. So, we use custom <name> to avoid incorrect splitting on :.\n\n\n\n\n\n","category":"method"},{"location":"lib/write_xml/#PhysiCellXMLRules.writeXMLRules-Tuple{AbstractString, AbstractString}","page":"Write XML","title":"PhysiCellXMLRules.writeXMLRules","text":"writeXMLRules(path_to_xml::AbstractString, path_to_csv::AbstractString; force::Bool=false)\n\nWrite the rules from the CSV file at path_to_csv to the XML file at path_to_xml.\n\nIf force is set to true, the function will overwrite the existing XML file at path_to_xml if it exists. Note: this is not the inverse of exportCSVRules as writeXMLRules discards comments in the original CSV and exportCSVRules adds comments to the exported CSV file.\n\n\n\n\n\n","category":"method"},{"location":"man/guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"man/guide/#Getting-started","page":"Guide","title":"Getting started","text":"","category":"section"},{"location":"man/guide/#Download-julia","page":"Guide","title":"Download julia","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"See here for more options:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"$ curl -fsSL https://install.julialang.org | sh","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note: this command also installs the JuliaUp installation manager, which will automatically install julia and help keep it up to date.","category":"page"},{"location":"man/guide/#Add-the-PCVCTRegistry","page":"Guide","title":"Add the PCVCTRegistry","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Launch julia by running julia in a shell. Then, enter the Pkg REPL by pressing ]. Finally, add the PCVCTRegistry by running:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"pkg> registry add https://github.com/drbergman/PCVCTRegistry","category":"page"},{"location":"man/guide/#Install-PhysiCellXMLRules","page":"Guide","title":"Install PhysiCellXMLRules","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Still in the Pkg REPL, run:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"pkg> add PhysiCellXMLRules","category":"page"},{"location":"man/guide/#Using-PhysiCellXMLRules","page":"Guide","title":"Using PhysiCellXMLRules","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To convert a PhysiCell rules file (in CSV format) into an XML format, use","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using PhysiCellXMLRules\nnew_file = \"rules.xml\"\nsource_file = \"rules.csv\"\nwriteXMLRules(new_file, source_file)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To convert from the XML format to the CSV format, use","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using PhysiCellXMLRules\nnew_file = \"rules.csv\"\nsource_file = \"rules.xml\"\nexportCSVRules(new_file, source_file)","category":"page"},{"location":"lib/export/","page":"Export","title":"Export","text":"CollapsedDocStrings = true","category":"page"},{"location":"lib/export/#Export","page":"Export","title":"Export","text":"","category":"section"},{"location":"lib/export/","page":"Export","title":"Export","text":"Exports XML-based behavior rulesets into CSV approximations. Note, hiearchical rulesets (those with mediators and aggregators below the top two levels) are possibly lossy. This is meant, at the moment, to create an easier, human-readable format for understanding the rules in the XML file.","category":"page"},{"location":"lib/export/","page":"Export","title":"Export","text":"Modules = [PhysiCellXMLRules]\nPages = [\"export.jl\"]","category":"page"},{"location":"lib/export/#PhysiCellXMLRules.exportCSVRules-Tuple{AbstractString, AbstractString}","page":"Export","title":"PhysiCellXMLRules.exportCSVRules","text":"exportCSVRules(path_to_csv::AbstractString, path_to_xml::AbstractString; force::Bool=false)\n\nExport the rules from the XML file at path_to_xml to the CSV file at path_to_csv.\n\nIf force is set to true, the function will overwrite the existing CSV file at path_to_csv if it exists. Note: this is not the inverse of writeXMLRules as writeXMLRules discards comments in the original CSV and exportCSVRules adds comments to the exported CSV file.\n\n\n\n\n\n","category":"method"},{"location":"lib/export/#PhysiCellXMLRules.standardizeCustomNameExport-Tuple{Any}","page":"Export","title":"PhysiCellXMLRules.standardizeCustomNameExport","text":"standardizeCustomNameExport(name::AbstractString)\n\nIf the name for a signal or behavior starts with \"custom \", use the synonym \"custom:<name>\" instead when exporting to a CSV.\n\nBoth are acceptable, but this function will convert it to the more standard format in PhysiCell.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PhysiCellXMLRules","category":"page"},{"location":"#PhysiCellXMLRules","page":"Home","title":"PhysiCellXMLRules","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PhysiCellXMLRules.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Convert PhysiCell rules between CSV and XML formats. Enables conversion between https://github.com/MathCancer/PhysiCell/ and https://github.com/drbergman/PhysiCell/.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PhysiCellXMLRules]\nPages = [\"PhysiCellXMLRules.jl\"]","category":"page"}]
}
